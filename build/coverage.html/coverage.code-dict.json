{"/home/travis/build/npmtest/node-npmtest-imgr/test.js":"/* istanbul instrument in package npmtest_imgr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imgr/lib.npmtest_imgr.js":"/* istanbul instrument in package npmtest_imgr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_imgr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_imgr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-imgr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-imgr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_imgr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_imgr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_imgr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_imgr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_imgr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_imgr.__dirname + '/lib.npmtest_imgr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imgr/node_modules/imgr/index.js":"module.exports = require('./lib/imgr');\n\n","/home/travis/build/npmtest/node-npmtest-imgr/node_modules/imgr/lib/imgr.js":"/**\n * Module dependencies.\n */\n\nvar Server = require('./server').Server\n  , Converter = require('./converter').Converter\n  , constants = require('./constants')\n  , utils = require('./utils');\n\n/**\n * Default options.\n */\n\nvar default_options = {};\n\n/**\n * Create a new IMGR instance.\n *\n * @param {Object} options (optional)\n */\n\nvar IMGR = exports.IMGR = function (options) {\n    this.options = utils.mergeDefaults(options, default_options);\n};\n\n/**\n * Create a new image server.\n *\n * @param {String} path\n */\n\nIMGR.prototype.serve = function (path) {\n    return new Server(path, this.options, this);\n};\n\n/**\n * Create a new image converter.\n *\n * @param {String} path\n */\n\nIMGR.prototype.load = function (path) {\n    return new Converter(path, this.options);\n};\n\n/**\n * Export constants from `./constants.js`.\n */\n\nfor (var key in constants) {\n    IMGR.prototype[key] = constants[key];\n}\n\nexports.size = require('./size');\n\n","/home/travis/build/npmtest/node-npmtest-imgr/node_modules/imgr/lib/server.js":"/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , fs = require('fs')\n  , path = require('path')\n  , utils = require('./utils')\n  , async = require('async')\n  , imgr = require('./constants');\n\n/**\n * Default options.\n */\n\nvar default_options = {\n    namespace: '/'\n  , cache_dir: '/tmp/imgr'\n  , url_rewrite: '/:path/:size/:file.:ext'\n  , whitelist: false\n  , blacklist: false\n  , debug: false\n  , as_route: false\n  , querystring_301: true\n  , try_content: true\n  , try_cache: true\n  , trace: function () {}\n};\n\n/**\n * Create a new static image server.\n *\n * @param {String} path - where to serve images from\n * @param {Object} options (optional)\n */\n\nvar Server = exports.Server = function (path, options, imgr) {\n    this.path = path;\n    this.imgr = imgr;\n    this.options = utils.mergeDefaults(options, default_options);\n};\n\n/**\n * Set the image namespace.\n *\n * @param {String} namespace - e.g. /images\n * @return this\n */\n\nServer.prototype.namespace = function (namespace) {\n    this.options.namespace = namespace || '/';\n    return this;\n};\n\n/**\n * Set the cached/compiled image directory.\n *\n * @param {String} path\n * @return this\n */\n\nServer.prototype.cacheDir = function (cache_dir) {\n    this.options.cache_dir = cache_dir;\n    return this;\n};\n\n/**\n * Whitelist image sizes. Image sizes are specified using 'WIDTHxHEIGHT-ORIENTATION'\n * where any parameter can be omitted, e.g. '200x300-centre' or just '200x' to\n * allow images with a width of 200 and any height. Pass `false` to disable\n * the whitelist.\n *\n * @param {String|Array|Boolean} whitelist\n * @return this\n */\n\nServer.prototype.whitelist = function (whitelist) {\n    if (!Array.isArray(whitelist)) {\n        whitelist = [ whitelist ];\n    }\n    this.options.whitelist = whitelist;\n    return this;\n};\n\n/**\n * Blacklist image sizes. The parameters are the same as `whitelist()`.\n *\n * @param {String|Array|Boolean} blacklist\n * @return this\n */\n\nServer.prototype.blacklist = function (blacklist) {\n    if (!Array.isArray(blacklist)) {\n        blacklist = [ blacklist ];\n    }\n    this.options.blacklist = blacklist;\n    return this;\n};\n\n/**\n * Set the rewriting strategy. Accepted tokens are :path (dirname), :file.:ext (basename),\n * :size (e.g. 200x200, 300x or 200x100-centre). Size is optional and is used to resize\n * the image on demand. Pass `false` to disable url rewriting.\n *\n * Example using the default '/:path/:size/:file.:ext':\n *\n *    /images/foobar.jpg => serves the unaltered image\n *    /images/200x300-centre/foobar.jpg => resizes /images/foobar.jpg to be exactly\n *                                         200x300, cropping from the centre\n *    /images/400x/foobar.jpg => resizes /images/foobar.jpg to be 400 pixels wide\n *\n * Another example '/:path/:file-:size.:ext'\n *\n *    /images/foobar-200x300-centre.jpg\n *    /images/foobar-400x.jpg\n *\n * @param {String|Boolean} url_rewrite\n * @return this\n */\n\nServer.prototype.urlRewrite = function (url_rewrite) {\n    this.options.url_rewrite = url_rewrite;\n    return this;\n};\n\n/**\n * Set maxAge of static provider.\n *\n * Browser cache maxAge in milliseconds. defaults to 0\n *\n * @param {Number} maxAge\n * @return this\n */\n\nServer.prototype.maxAge = function (maxAge) {\n    this.options.maxAge = maxAge;\n    return this;\n};\n\n/**\n * Debug the server.\n *\n * @param {Boolean} enable (optional)\n * @return this\n */\n\nServer.prototype.debug = function (enable) {\n    if (typeof enable === 'undefined') {\n        enable = true;\n    }\n    this.options.debug = !!enable;\n    return this;\n};\n\n/**\n * Output a debug msg.\n *\n * @param {String} msg\n * @param {Array} args\n * @api private\n */\n\nServer.prototype.info = function (msg, args) {\n    if (!this.options.debug) {\n        return;\n    }\n    args = Array.prototype.slice.call(arguments);\n    args[0] = 'imgr: ' + args[0];\n    console.log.apply(console, args);\n};\n\n/**\n * Bind an express app and begin serving images.\n *\n * @param {ExpressApp} express\n * @return this\n */\n\nServer.prototype.using = function (app) {\n    var middleware = this.middleware();\n    if (this.options.as_route) {\n        var namespace = this.options.namespace.replace(/\\/$/, '')\n          , namespace_prefix = new RegExp('^' + namespace + '/');\n        app.get(namespace_prefix, middleware);\n        app.head(namespace_prefix, middleware);\n    } else {\n        app.use(middleware);\n    }\n};\n\n/**\n *\n */\n\nServer.prototype.resizeImage = function (src, dest, parameters, callback) {\n    var self = this;\n    fs.stat(src, function handleOriginalStat(err, size) {\n        if (err | !size) {\n            self.options.trace('missing_original');\n            return callback();\n        }\n\n        self.info('compiling %s', dest);\n\n        //Resize / crop as necessary\n        var imgr = self.imgr.load(src, self.options);\n        if (parameters.width) {\n            if (parameters.height) {\n                self.options.trace('resize_adaptive');\n                imgr.adaptiveResize(parameters.width, parameters.height, parameters.orientation);\n            } else {\n                self.options.trace('resize_width');\n                imgr.resizeToWidth(parameters.width);\n            }\n        } else if (parameters.height) {\n            self.options.trace('resize_height');\n            imgr.resizeToHeight(parameters.height);\n        }\n\n        //Save the image\n        imgr.save(dest, function handleImgrSave(err) {\n            if (err) {\n                self.options.trace('gm_fail');\n                self.info('conversion error: %s', err);\n                return callback(err);\n            }\n            callback();\n        });\n    });\n};\n\n/**\n * Get imgr middleware\n *\n * @return {Function} middleware\n */\n\nServer.prototype.middleware = function () {\n    var namespace = this.options.namespace.replace(/\\/$/, '')\n      , namespace_prefix = new RegExp('^' + namespace + '/')\n      , base_dir = this.path.replace(/\\/$/, '')\n      , cache_dir = this.options.cache_dir.replace(/\\/$/, '')\n      , whitelist = this.options.whitelist\n      , blacklist = this.options.blacklist\n      , maxAge = this.options.maxAge\n      , trace = this.options.trace\n      , info = this.info.bind(this)\n      , self = this;\n\n    //Setup the static servers\n    var base_static = express.static(base_dir, { maxAge: maxAge })\n      , cache_static = base_static;\n    if (cache_dir !== base_dir) {\n        cache_static = express.static(cache_dir, { maxAge: maxAge });\n    }\n\n    if (whitelist) {\n        info('whitelist: [%s]', whitelist.join(', '));\n        whitelist = utils.createSet(whitelist);\n    }\n    if (blacklist) {\n        info('blacklist: [%s]', blacklist.join(', '));\n        blacklist = utils.createSet(blacklist);\n    }\n\n    function tryContentDirectory(request, response, next) {\n        info('trying to serve %s', path.join(base_dir, request.url));\n        base_static(request, response, next);\n    }\n\n    function tryCacheDirectory(request, response, next) {\n        info('trying to serve %s', path.join(cache_dir, request.url));\n        cache_static(request, response, next);\n    }\n\n    function resizeImage(request, response, next) {\n        info('extracting image parameters from url');\n        var parameters = self.parse(request);\n        if (!parameters) {\n            return next();\n        }\n\n        info('extracted size %s', parameters.size);\n\n        var src_image = path.join(base_dir, decodeURIComponent(parameters.path))\n          , dest_image = path.join(cache_dir, decodeURIComponent(request.url));\n\n        //Check for blacklisted and whitelisted parameters\n        var size_check = parameters.size.replace(/-.+$/, '');\n        if (blacklist && size_check in blacklist) {\n            info('image size is in blacklist');\n            trace('blacklist_hit');\n            response.status(403);\n            return response.send();\n        } else if (whitelist) {\n            var sizes = size_check.split('x')\n              , allowed = false\n              , to_check = [\n                    size_check\n                  , sizes[0] + 'x*'\n                  , '*x' + sizes[1]\n                ];\n            for (var i = 0; i < 3; i++) {\n                if (to_check[i] in whitelist) {\n                    allowed = true;\n                    break;\n                }\n            }\n            if (!allowed) {\n                info('image size is not in whitelist');\n                trace('whitelist_miss');\n                response.status(403);\n                return response.send();\n            }\n        }\n\n        info('image size is allowed');\n\n        self.resizeImage(src_image, dest_image, parameters, next);\n    }\n\n    var middleware = [\n        resizeImage\n      , tryCacheDirectory\n    ];\n\n    if (this.options.try_cache) {\n        middleware.unshift(tryCacheDirectory);\n    }\n    if (this.options.try_content) {\n        middleware.unshift(tryContentDirectory);\n    }\n\n    return function imgrMiddleware(request, response, next) {\n        if (namespace && !namespace_prefix.test(request.url)) {\n            return next();\n        }\n\n        //Redirect if there's a querystring?\n        if (self.options.querystring_301 && request.url.indexOf('?') >= 0) {\n            trace('trim_querystring');\n            return response.redirect(301, request.url.replace(/\\?.*$/, ''));\n        }\n\n        //Remove the namespace\n        var original_url = request.url;\n        request.url = request.url.substr(namespace.length);\n        info('request url is %s', request.url);\n\n        async.eachSeries(middleware, function (stage, next_stage) {\n            stage(request, response, next_stage);\n        }, function () {\n            request.url = original_url;\n            next.apply(null, arguments);\n        });\n    };\n};\n\n/**\n * Parse the parameters of the request.\n *\n * @param {Request} request\n * @return {Object}\n */\n\nServer.prototype.parse = function (request) {\n    if (!this.parseRegexp) {\n        this.parseRegexp = this.compileRegexp(this.options.url_rewrite);\n    }\n    return this.parseRegexp(request.url);\n};\n\n/**\n * Compile a URL regexp.\n *\n * @param {String} pattern\n * @return {Object|Boolean} regexp\n * @api private\n */\n\nServer.prototype.compileRegexp = function (pattern) {\n    if (!pattern) {\n        return function compileRegexp() {\n            return false;\n        };\n    }\n    var directive_match = /:([a-z]+)/g\n      , directives = []\n      , match;\n    pattern = pattern.replace(/\\(/g, '(?:').replace(/\\./g, '\\\\.');\n    while ((match = directive_match.exec(pattern))) {\n        directives.push(match[1]);\n    }\n    pattern = pattern.replace(':size', '(\\\\d+x|x+\\\\d+|\\\\d+x\\\\d+(?:-[a-z]+)?)')\n                     .replace('/:path', '(?:/(.+?))?')\n                     .replace(':ext', '([^/]+?)')\n                     .replace(':file', '([^/]+?)');\n    var regexp = new RegExp('^' + pattern + '$');\n    return function compileRegexp(url) {\n        var match = url.match(regexp);\n        if (!match) {\n            return false;\n        }\n        var parsed = {}, result = {};\n        for (var i = 0, l = directives.length; i < l; i++) {\n            parsed[directives[i]] = match[i + 1];\n        }\n        var filename = parsed.file + (parsed.ext ? '.' + parsed.ext : '');\n        result.path = path.join(parsed.path || '', filename);\n        if (parsed.size) {\n            result.size = parsed.size;\n            result.width = parsed.size.split('x', 2);\n            result.height = (result.width[1] || '').split('-', 2);\n            result.orientation = result.height[1] || null;\n            result.height = Number(result.height[0]) || null;\n            result.width = Number(result.width[0]) || null;\n            if (result.orientation) {\n                switch (result.orientation) {\n                case 'top':\n                    result.orientation = imgr.TOP;\n                    break;\n                case 'left':\n                    result.orientation = imgr.LEFT;\n                    break;\n                case 'right':\n                    result.orientation = imgr.RIGHT;\n                    break;\n                case 'bottom':\n                    result.orientation = imgr.BOTTOM;\n                    break;\n                default:\n                    result.orientation = imgr.CENTRE;\n                    break;\n                }\n            }\n        }\n        return result;\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-imgr/node_modules/imgr/lib/utils.js":"var crypto = require('crypto')\n  , utils = exports;\n\n/**\n * Merge defaults into an options object.\n *\n * @param {Object} options\n * @param {Object] defaults\n */\n\nutils.mergeDefaults = function (options, defaults) {\n    options = options || {};\n    for (var key in defaults) {\n        if (typeof options[key] === 'undefined') {\n            options[key] = defaults[key];\n        } else if (typeof defaults[key] === 'object') {\n            utils.mergeDefaults(options[key], defaults[key]);\n        }\n    }\n    return options;\n};\n\n/**\n * Create a set from an array where elements are stored as object keys.\n *\n * @param {Array} arr\n * @return {Object} set\n * @api public\n */\n\nutils.createSet = function (arr) {\n    var obj = {};\n    arr.forEach(function (elem) {\n        obj[elem] = 1;\n    });\n    return obj;\n};\n\n/**\n * Get the MD5 hash of a string.\n *\n * @param {String} str\n * @return {String} hash\n * @api public\n */\n\nutils.md5 = function (str) {\n    return crypto.createHash('md5').update(str).digest('hex');\n};\n\n/**\n * Manage concurrency.\n *\n * @param {Object} prototype\n * @param {String} fn_name\n * @param {Number} concurrency\n */\n\nutils.concurrent = function (prototype, fn_name, concurrency) {\n    var original = prototype[fn_name]\n      , running = 0\n      , pending = [];\n    prototype[fn_name] = function () {\n        pending.push([this, Array.prototype.slice.call(arguments)]);\n        (function next() {\n            while (pending.length && running < concurrency) {\n                var context = pending.shift()\n                  , scope = context[0]\n                  , args = context[1]\n                  , callback = args.pop();\n                args.push(function () {\n                    running--;\n                    process.nextTick(next);\n                    callback.apply(this, arguments);\n                });\n                running++;\n                original.apply(scope, args);\n            }\n        })();\n    };\n};\n\n/**\n * Prevent a function from being called with the same arguments simultaneously.\n *\n * @param {Object} prototype\n * @param {String} fn_name\n * @api public\n */\n\nutils.floodProtection = function (prototype, fn_name) {\n    var original = prototype[fn_name]\n      , queue = {};\n    prototype[fn_name] = function () {\n        var args = Array.prototype.slice.call(arguments)\n          , callback = args.pop()\n          , hash = fn_name + ':' + JSON.stringify(args);\n        if (hash in queue) {\n            queue[hash].push(callback);\n            return;\n        } else {\n            queue[hash] = [ callback ];\n        }\n        args.push(function () {\n            var result = Array.prototype.slice.call(arguments);\n            queue[hash].forEach(function (callback) {\n                callback.apply(null, result);\n            });\n            delete queue[hash];\n        });\n        original.apply(this, args);\n    };\n};\n\n","/home/travis/build/npmtest/node-npmtest-imgr/node_modules/imgr/lib/constants.js":"var imgr = exports;\n\nimgr.TOP = 1;\nimgr.LEFT = 2;\nimgr.CENTRE = 3;\nimgr.RIGHT = 4;\nimgr.BOTTOM = 5;\n\n","/home/travis/build/npmtest/node-npmtest-imgr/node_modules/imgr/lib/converter.js":"/**\n * Module dependencies.\n */\n\nvar gm = require('gm')\n  , fs = require('fs')\n  , path = require('path')\n  , mkdirp = require('mkdirp')\n  , utils = require('./utils')\n  , imagesize = require('./size')\n  , imgr = require('./constants');\n\n/**\n * A stub for skipping optimisation. Replace this function\n * with your own to enable image optimisation.\n *\n * @param {String} path\n * @param {Function} callback\n */\n\nfunction noOptimisation(path, callback) {\n    callback();\n}\n\n/**\n * Default options.\n */\n\nvar default_options = {\n    orientation: imgr.CENTRE\n  , image_magick: false\n  , optimisation: noOptimisation\n  , gm_quality: 100\n  , crop_offset: 0\n  , filter: null\n  , interlace: null\n  , coalesce: true\n  , trace: function () {}\n};\n\n/**\n * Create a new image converter.\n *\n * @param {String} image - the image to load\n * @param {Object} options (optional)\n */\n\nvar Converter = exports.Converter = function (image, options) {\n    this.image = image;\n    this.options = utils.mergeDefaults(options, default_options);\n    this.gm = gm.subClass({ imageMagick: this.options.image_magick });\n    this.operation = {};\n};\n\n/**\n * Resize an image to the specified width.\n *\n * @param {Number} width\n * @return this\n */\n\nConverter.prototype.resizeToWidth = function (width) {\n    this.operation.width = width;\n    return this;\n};\n\n/**\n * Resize an image to the specified height.\n *\n * @param {Number} height\n * @return this\n */\n\nConverter.prototype.resizeToHeight = function (height) {\n    this.operation.height = height;\n    return this;\n};\n\n/**\n * Resize an image by the specified factor, e.g. 0.5 would resize the image\n * to be half the width and height that it was.\n *\n * @param {Number} factor\n * @return this\n */\n\nConverter.prototype.resizeByFactor = function (factor) {\n    this.operation.factor = factor;\n    return this;\n};\n\n/**\n * Resize an image to an exact width and height using adaptive resizing.\n * Crop the largest portion of the image with the same aspect ratio and\n * then resize to the desired dimensions.\n *\n * @param {Number} width\n * @param {Number} height\n * @param {Number} orientation (optional)\n * @return this\n */\n\nConverter.prototype.adaptiveResize = function (width, height, orientation) {\n    this.operation.width = width;\n    this.operation.height = height;\n    this.operation.orientation = orientation || this.options.orientation;\n    return this;\n};\n\n/**\n * Crop an image to the specified width and height, starting from the\n * specified x and y point.\n *\n * @param {Number} width\n * @param {Number} height\n * @param {Number} x (optional)\n * @param {Number} y (optional)\n * @return this\n */\n\nConverter.prototype.crop = function (width, height, x, y) {\n    this.operation.crop_width = width;\n    this.operation.crop_height = height;\n    this.operation.x = x || 0;\n    this.operation.y = y || 0;\n    return this;\n};\n\n/**\n * Get an image size.\n *\n * @param {String} image\n * @param {Function} callback\n */\n\nConverter.prototype.size = function (image, callback) {\n    imagesize(image, callback);\n};\n\n/**\n * Execute the pending conversion and save the resulting image to `output`.\n *\n * @param {String} output\n * @param {Function} callback\n */\n\nConverter.prototype.save = function (output, callback) {\n    var dir = path.dirname(output)\n      , image = this.gm(this.image)\n      , operation = this.operation\n      , self = this;\n\n    this.callback = callback;\n\n    //Create the output dir if it doesn't already exist\n    mkdirp(dir, function () {\n\n        //Skip resize/crop?\n        if (!operation.width && !operation.height && !operation.factor && !operation.crop_width) {\n            return self.copy(self.image, output, function (err) {\n                return self.finalise(err);\n            });\n        }\n\n        //Get the current image dimensions\n        self.size(self.image, function (err, size) {\n            if (err || !size) {\n                return self.finalise(err || 'Failed to obtain image dimensions');\n            }\n\n            //Adaptive resizing\n            if (operation.width && operation.height && typeof operation.crop_width === 'undefined') {\n                var original_ar = size.width / size.height\n                  , new_ar = operation.width / operation.height\n                  , crop_offset = 0;\n                if (new_ar < original_ar) {\n                    operation.crop_width = Math.round(operation.width * size.height / operation.height);\n                    if (self.options.crop_offset) {\n                        crop_offset = size.width * self.options.crop_offset / 100;\n                    }\n                    if (operation.orientation === imgr.LEFT) {\n                        operation.x = crop_offset;\n                        if (operation.x + operation.crop_width > size.width) {\n                            operation.x = size.width - operation.crop_width;\n                        }\n                    } else if (operation.orientation === imgr.CENTRE) {\n                        operation.x = Math.round((size.width - operation.crop_width) / 2);\n                    } else if (operation.orientation === imgr.RIGHT) {\n                        operation.x = Math.max(size.width - operation.crop_width - crop_offset, 0);\n                    }\n                } else if (new_ar > original_ar) {\n                    operation.crop_height = Math.round(operation.height * size.width / operation.width);\n                    if (self.options.crop_offset) {\n                        crop_offset = size.height * self.options.crop_offset / 100;\n                    }\n                    if (operation.orientation === imgr.TOP) {\n                        operation.y = crop_offset;\n                        if (operation.y + operation.crop_height > size.height) {\n                            operation.y = size.height - operation.crop_height;\n                        }\n                    } else if (operation.orientation === imgr.CENTRE) {\n                        operation.y = Math.round((size.height - operation.crop_height) / 2);\n                    } else if (operation.orientation === imgr.BOTTOM) {\n                        operation.y = Math.max(size.height - operation.crop_height - crop_offset, 0);\n                    }\n                }\n            }\n\n            //Coalesce images (when resizing animated gifs)\n            if (self.options.coalesce) {\n                image.coalesce();\n            }\n\n            //Apply the crop operation\n            if (operation.crop_width || operation.crop_height) {\n                operation.x = operation.x || 0;\n                operation.y = operation.y || 0;\n                operation.crop_width = operation.crop_width || (size.width - operation.x);\n                operation.crop_height = operation.crop_height || (size.height - operation.y);\n                image.crop(operation.crop_width, operation.crop_height, operation.x, operation.y);\n                image.repage(0, 0, 0, 0);\n            }\n\n            //Resize by a constant factor\n            if (operation.factor) {\n                operation.width = Math.round(size.width * operation.factor);\n                operation.height = Math.round(size.height * operation.factor);\n            }\n\n            image.quality(self.options.gm_quality);\n\n            //Use a custom resizing filter\n            if (self.options.filter) {\n                image.filter(self.options.filter);\n            }\n\n            //Specify the type of interlacing scheme\n            if (self.options.interlace) {\n                image.interlace(self.options.interlace);\n            }\n\n            //Fill in the missing dimension\n            if (!operation.width && operation.height) {\n                operation.width = Math.ceil(operation.height / size.height * size.width);\n            }\n            if (!operation.height && operation.width) {\n                operation.height = Math.ceil(operation.width / size.width * size.height);\n            }\n\n            //Apply the resize operation\n            if (operation.width || operation.height) {\n                image.resize(operation.width, operation.height);\n            }\n\n            //Save the image\n            image.write(output, function (err) {\n                self.options.trace('gm_convert');\n                self.image = output;\n                self.finalise(err, operation);\n            });\n        });\n    });\n};\n\n/**\n * Copy a file.\n *\n * @param {String} src\n * @param {String} dest\n * @param {Function} callback\n * @api private\n */\n\nConverter.prototype.copy = function (src, dest, callback) {\n    var stream = fs.createReadStream(src);\n    this.options.trace('image_copy');\n    stream.pipe(fs.createWriteStream(dest));\n    stream.on('end', callback);\n    stream.on('error', callback);\n};\n\n/**\n * Finalise the save() process.\n *\n * @param {Function} callback\n * @api private\n */\n\nConverter.prototype.finalise = function (err, operation) {\n    var callback = this.callback\n      , image = this.image\n      , optimise = this.options.optimisation;\n\n    //Reset the operation\n    this.operation = {};\n    delete this.image;\n    delete this.callback;\n\n    if (err || !optimise) {\n        if (typeof err === 'object' && err.message.indexOf('installed graphicsmagick') >= 0) {\n            err = 'Graphicsmagick is not installed';\n        }\n        return callback(err);\n    }\n\n    if (optimise.length === 2) {\n        optimise(image, callback);\n    } else if (optimise.length === 3) {\n        optimise(image, operation, callback);\n    }\n};\n\n/**\n * Manage concurrency.\n */\n\nutils.concurrent(Converter.prototype, 'size', 5);\nutils.floodProtection(Converter.prototype, 'size');\nutils.concurrent(Converter.prototype, 'save', 5);\nutils.floodProtection(Converter.prototype, 'save');\n\n","/home/travis/build/npmtest/node-npmtest-imgr/node_modules/imgr/lib/size.js":"var imagesize = require('imagesize')\n  , fs = require('fs');\n\n/**\n * Get the dimensions of an image.\n *\n * @param {String} path\n * @param {Function} callback - receives (err, dimensions)\n */\n\nmodule.exports = function (path, callback) {\n    var stream = fs.createReadStream(path);\n    imagesize(stream, function (err, dimensions) {\n        if (err) err = new Error('The image dimensions could not be determined (the image may be invalid).');\n        stream.destroy();\n        callback(err, dimensions);\n    });\n};\n\n"}